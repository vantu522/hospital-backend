import healthInsuranceExamRepository from '../repositories/health-insurance-exam.repository.js';
import axios from 'axios';
import QRCode from 'qrcode';
import https from 'https';

class HealthInsuranceExamService {
  
  formatDisplayDateTime(date, showTimeComponent = true) {
  if (!date) return '';
  try {
    let d;

    if (date instanceof Date) {
      d = date;
    } else if (typeof date === 'string' && /^\d{2}\/\d{2}\/\d{4}$/.test(date)) {
      // Tr∆∞·ªùng h·ª£p dd/MM/yyyy
      const [day, month, year] = date.split('/');
      d = new Date(`${year}-${month}-${day}T00:00:00`);
    } else {
      d = new Date(date); // ISO hay timestamp
    }

    if (isNaN(d.getTime())) return '';

    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    const year = d.getFullYear();

    if (!showTimeComponent) {
      return `${month}/${day}/${year}`;
    }

    const hours = String(d.getHours()).padStart(2, '0');
    const minutes = String(d.getMinutes()).padStart(2, '0');
    return `${hours}:${minutes} ${month}/${day}/${year}`;
  } catch {
    return '';
  }
}

  //Khai b√°o agent 
  agent = new https.Agent({
    cert: process.env.CSS ? Buffer.from(process.env.CSS) : undefined,
    key: process.env.CSS ? Buffer.from(process.env.CSS) : undefined,
    rejectUnauthorized: false // dev, prod n√™n true
  });
  // Cache k·∫øt qu·∫£ check BHYT th√†nh c√¥ng (key: maThe)
  bhytResultCache = {};
  
  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu BHYT sang format chu·∫©n cho API b√™n th·ª© 3
  convertBHYTToThirdParty(bhytData) {
    return {
      "Domain": process.env.DOMAIN,
      SoBHYT: bhytData.maThe,
      HoVaTen: bhytData.hoTen,
      NgaySinh: bhytData.ngaySinh,
      GioiTinh: bhytData.gioiTinh === 'Nam',
      DiaChi: bhytData.diaChi,
      NoiDKBD: bhytData.maDKBD,
      TenBenhVienDKBD: bhytData.tenDKBDMoi || '',
      NgayDangKy: this.formatDisplayDateTime(bhytData.gtTheTu),
      NgayHieuLuc: this.formatDisplayDateTime(bhytData.gtTheTu),
      NgayHetHan: this.formatDisplayDateTime(bhytData.gtTheDen),
      Active: true,
      IsBHYT5Nam: !!bhytData.ngayDu5Nam,
      NgayDu5Nam: bhytData.ngayDu5Nam,
      MaSoBHXH: bhytData.maSoBHXH,
      IsMaTheMoi: !!bhytData.maTheMoi,
    };
  }
  // Lock ƒë·ªÉ ƒë·ªìng b·ªô l·∫•y token m·ªõi khi g·∫∑p l·ªói 401
  bhytTokenLock = false;
  // Cache token/id_token cho BHYT v·ªõi TTL
  bhytTokenCache = { 
    token: null, 
    id_token: null, 
    expiresAt: null 
  };
  // Cache template ƒë·ªÉ gi·∫£m DB query
  templatesCache = { 
    data: null, 
    expiresAt: null 
  };

  // === G·ªçi API an to√†n v·ªõi retry cho l·ªói m·∫°ng ===
  async safePost(url, body, options = {}, maxRetry = 3) {
    let lastError;
    for (let attempt = 1; attempt <= maxRetry; attempt++) {
      try {
        return await axios.post(url, body, { timeout: 15000, ...options });
      } catch (err) {
        if (['ECONNRESET','ECONNABORTED'].includes(err.code) || err.message.includes('timeout')) {
          lastError = err;
          await new Promise(r => setTimeout(r, 300));
          continue;
        }
        throw err;
      }
    }
    throw lastError;
  }

  // === L·∫•y token BHYT v·ªõi TTL t·ª´ server response ===
  async getBHYTToken() {
    while (this.bhytTokenLock) await new Promise(r => setTimeout(r, 100));
    
    // Check TTL cache
    if (this.bhytTokenCache.token && 
        this.bhytTokenCache.id_token && 
        this.bhytTokenCache.expiresAt > Date.now()) {
      return this.bhytTokenCache;
    }

    this.bhytTokenLock = true;
    try {
      const { BHYT_USERNAME: username, BHYT_PASSWORD: password, BHYT_TOKEN_URL: url } = process.env;

      const tokenRes = await this.safePost(url, { username, password });
      const apiKey = tokenRes.data.APIKey || {};
      
      // T√≠nh TTL t·ª´ expires_in c·ªßa server ho·∫∑c fallback 15 ph√∫t
      let expiresAt;
      if (apiKey.expires_in) {
        // Parse ISO string t·ª´ server: "2025-09-05T07:31:44.6200586Z"
        expiresAt = new Date(apiKey.expires_in).getTime();
        
        // Safety buffer: Tr·ª´ ƒëi 30 gi√¢y ƒë·ªÉ tr√°nh edge case
        expiresAt -= (30 * 1000);
      } else {
        // Fallback: 15 ph√∫t n·∫øu kh√¥ng c√≥ expires_in
        expiresAt = Date.now() + (15 * 60 * 1000);
      }
      
      this.bhytTokenCache = { 
        token: apiKey.access_token || '', 
        id_token: apiKey.id_token || '',
        expiresAt: expiresAt
      };
      
      return this.bhytTokenCache;
    } finally {
      this.bhytTokenLock = false;
    }
  }

  // === Ki·ªÉm tra th·∫ª BHYT v·ªõi c∆° ch·∫ø refresh token khi g·∫∑p 401 ===
  async checkBHYTCard({ maThe, hoTen, ngaySinh }) {
    console.log('üîç [BHYT_CHECK] B·∫Øt ƒë·∫ßu ki·ªÉm tra th·∫ª BHYT:', { maThe, hoTen, ngaySinh });
    
    // Log th√¥ng tin cache hi·ªán t·∫°i tr∆∞·ªõc khi ki·ªÉm tra
    console.log('üîç [BHYT_CACHE] Tr·∫°ng th√°i cache tr∆∞·ªõc ki·ªÉm tra:');
    console.log('   - S·ªë l∆∞·ª£ng m√£ th·∫ª trong cache:', Object.keys(this.bhytResultCache).length);
    console.log('   - Danh s√°ch m√£ th·∫ª trong cache:', Object.keys(this.bhytResultCache));
    
    // Tham s·ªë ƒë√£ d√πng ƒë√∫ng t√™n ti·∫øng Vi·ªát, kh√¥ng c·∫ßn thay ƒë·ªïi
    const { BHYT_USERNAME: username, BHYT_PASSWORD: password, BHYT_HOTENCB: hoTenCb, BHYT_CCCDCB: cccdCb, BHYT_CHECK_URL: bhytCheckUrl } = process.env;
    
    if (!bhytCheckUrl) {
      console.error('‚ùå [BHYT_SERVICE] Missing BHYT_CHECK_URL in environment variables');
      return { success: false, message: 'C·∫•u h√¨nh API BHYT kh√¥ng ƒë√∫ng' };
    }
    
    console.log('üîÑ [BHYT_SERVICE] Getting token...');
    let { token, id_token } = await this.getBHYTToken();
    const body = { maThe, hoTen, ngaySinh, hoTenCb, cccdCb };

    const requestAPI = async () => {
      const url = `${bhytCheckUrl}?id_token=${id_token}&password=${password}&token=${token}&username=${username}`;
      return await this.safePost(url, body);
    };

    try {
      let response = await requestAPI();

      if (response.data?.maKetQua === "401") {
        this.bhytTokenCache = { token: null, id_token: null, expiresAt: null };
        ({ token, id_token } = await this.getBHYTToken());
        await new Promise(r => setTimeout(r, 1000));
        response = await requestAPI();

        if (response.data?.maKetQua === "401") {
          return { success: false, message: response.data.ghiChu || "Token kh√¥ng ƒë√∫ng.", code: "401", data: response.data };
        }
      }

      // Ch·ªâ c√≥ maKetQua = "000" l√† th√†nh c√¥ng, t·∫•t c·∫£ c√°c m√£ kh√°c ƒë·ªÅu l√† l·ªói
      if (response.data?.maKetQua === "000") {
        // Cache k·∫øt qu·∫£ convert cho maThe
        const converted = this.convertBHYTToThirdParty(response.data);
        
        // Log d·ªØ li·ªáu converted ƒë·ªÉ debug
        console.log('‚úÖ [BHYT_CACHE] L∆∞u d·ªØ li·ªáu v√†o cache cho m√£ th·∫ª:', maThe);
        console.log('‚úÖ [BHYT_CACHE] D·ªØ li·ªáu converted:', JSON.stringify(converted, null, 2));
        
        // L∆∞u v√†o cache
        this.bhytResultCache[maThe] = converted;
        
        // Log danh s√°ch cache hi·ªán t·∫°i
        console.log('‚úÖ [BHYT_CACHE] Danh s√°ch cache hi·ªán t·∫°i:', 
          Object.keys(this.bhytResultCache).map(key => ({ key, hasData: !!this.bhytResultCache[key] })));
        
        return { success: true, data: response.data, converted };
      } else {
        return { 
          success: false, 
          message: response.data?.ghiChu || `Th·∫ª BHYT kh√¥ng h·ª£p l·ªá (m√£ l·ªói: ${response.data?.maKetQua})`, 
          code: response.data?.maKetQua,
          data: response.data 
        };
      }
    } catch (err) {
      return { success: false, message: err.message };
    }
  }

  // === Cache templates v·ªõi TTL ƒë·ªÉ gi·∫£m DB query ===
  async getTemplatesCache() {
    if (this.templatesCache.data && this.templatesCache.expiresAt > Date.now()) {
      return this.templatesCache.data;
    }

    const TimeSlotTemplate = (await import('../../models/time-slot-template.model.js')).default;
    const templates = await TimeSlotTemplate.find({ is_active: true }).lean();
    
    console.log(`üîÑ [TEMPLATES] ƒê√£ load ${templates.length} khung gi·ªù m·∫´u t·ª´ database`);
    
    // Cache 5 ph√∫t
    this.templatesCache = {
      data: templates,
      expiresAt: Date.now() + (5 * 60 * 1000)
    };
    
    return templates;
  }

  // === T·∫°o ho·∫∑c l·∫•y slot v·ªõi logic t·ª± ƒë·ªông t√¨m slot ti·∫øp theo cho receptionist ===
  async getOrCreateSlot(exam_date, exam_time, IdPhongKham, role) {
  const ScheduleSlot = (await import('../../models/schedule-slot.model.js')).default;
  const TimeSlotTemplate = (await import('../../models/time-slot-template.model.js')).default;

  console.log(`üîç [SLOT] T√¨m slot cho ph√≤ng: ${IdPhongKham}, ng√†y: ${new Date(exam_date).toLocaleDateString()}, gi·ªù: ${exam_time}`);

  // H√†m helper ƒë·ªÉ t√¨m khung gi·ªù ti·∫øp theo
  const findNextAvailableSlot = (currentTime, templates) => {
      // Format time ƒë·∫ßu v√†o ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng HH:MM
      const formatTime = (timeStr) => {
        try {
          const [h, m] = timeStr.split(':').map(Number);
          return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
        } catch (e) {
          // Tr∆∞·ªùng h·ª£p l·ªói, tr·∫£ v·ªÅ ch√≠nh ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o
          return timeStr;
        }
      };
      
      const toMinutes = t => {
        const [h, m] = t.split(':').map(Number);
        return h * 60 + m;
      };
      
      // Format l·∫°i th·ªùi gian ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng
      const formattedCurrentTime = formatTime(currentTime);
      const target = toMinutes(formattedCurrentTime);
      
      console.log(`üîç [SLOT] ƒêang t√¨m khung gi·ªù ph√π h·ª£p cho th·ªùi ƒëi·ªÉm ${formattedCurrentTime} (${target} ph√∫t)`);
      console.log(`üîç [SLOT] C√≥ ${templates.length} khung gi·ªù m·∫´u kh·∫£ d·ª•ng: `, templates.map(t => t.time).join(', '));
      
      // N·∫øu th·ªùi gian y√™u c·∫ßu ch√≠nh x√°c l√† m·ªôt khung gi·ªù, tr·∫£ v·ªÅ khung gi·ªù ƒë√≥
      const exactMatch = templates.find(tpl => tpl.time === formattedCurrentTime);
      if (exactMatch) {
        console.log(`‚úÖ [SLOT] T√¨m th·∫•y khung gi·ªù ch√≠nh x√°c: ${exactMatch.time}`);
        return exactMatch;
      }
      
      // S·∫Øp x·∫øp templates theo th·ªùi gian tƒÉng d·∫ßn
      const sortedTemplates = [...templates].sort((a, b) => toMinutes(a.time) - toMinutes(b.time));
      
      // T√¨m khung gi·ªù ti·∫øp theo sau th·ªùi gian y√™u c·∫ßu
      let nextSlot = null;
      for (const tpl of sortedTemplates) {
        const tplMinutes = toMinutes(tpl.time);
        if (tplMinutes > target) {
          nextSlot = tpl;
          console.log(`‚úÖ [SLOT] T√¨m th·∫•y khung gi·ªù ti·∫øp theo: ${tpl.time} (sau ${tplMinutes - target} ph√∫t)`);
          break; // L·∫•y khung gi·ªù ƒë·∫ßu ti√™n sau th·ªùi gian hi·ªán t·∫°i
        }
      }
      
      // N·∫øu kh√¥ng c√≥ khung gi·ªù n√†o sau th·ªùi gian hi·ªán t·∫°i, tr·∫£ v·ªÅ null (h·∫øt khung gi·ªù)
      if (!nextSlot) {
        console.log(`‚ùå [SLOT] Kh√¥ng t√¨m th·∫•y khung gi·ªù n√†o sau ${formattedCurrentTime}, ƒë√£ h·∫øt khung gi·ªù ƒë·∫∑t kh√°m`);
        return null;
      }
      
      return nextSlot;
    };


    let template = await TimeSlotTemplate.findOne({ time: exam_time, is_active: true }).lean();
    let adjustedTime = exam_time;

    // L·∫•y cached templates ƒë·ªÉ t√°i s·ª≠ d·ª•ng v√† gi·∫£m DB load
    const allTemplates = await this.getTemplatesCache();

    if (allTemplates.length === 0) {
      throw new Error('Kh√¥ng c√≥ khung gi·ªù m·∫´u n√†o ƒëang ho·∫°t ƒë·ªông');
    }

    console.log(`üîç [SLOT] T√¨m khung gi·ªù m·∫´u ${exam_time}: ${template ? 'T√¨m th·∫•y' : 'Kh√¥ng t√¨m th·∫•y'}`);
    
    // Tr∆∞·ªõc h·∫øt, ki·ªÉm tra xem ph√≤ng n√†y ƒë√£ c√≥ slots n√†o trong ng√†y ch∆∞a
    const existingSlotsForRoom = await ScheduleSlot.find({
      date: exam_date,
      IdPhongKham: IdPhongKham,
      is_active: true
    }).lean();
    
    console.log(`üîç [SLOT] Ph√≤ng ${IdPhongKham} c√≥ ${existingSlotsForRoom.length} slots trong ng√†y`);
    
    // ‚úÖ Logic x·ª≠ l√Ω theo role
    if (!template) {
      if (role === 'receptionist') {
        // Receptionist: T·ª± ƒë·ªông t√¨m khung gi·ªù ti·∫øp theo
        const foundTemplate = findNextAvailableSlot(exam_time, allTemplates);
        if (!foundTemplate) {
          throw new Error('ƒê√£ h·∫øt khung gi·ªù ƒë·∫∑t kh√°m trong ng√†y. Vui l√≤ng ch·ªçn ng√†y kh√°c.');
        }
        template = foundTemplate;
        adjustedTime = template.time;
      } else {
        // User: B√°o l·ªói n·∫øu kh√¥ng c√≥ khung gi·ªù m·∫´u ch√≠nh x√°c
        throw new Error(`Khung gi·ªù ${exam_time} kh√¥ng c√≥ trong l·ªãch kh√°m. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c.`);
      }
    }

    // Logic t·ª± ƒë·ªông t√¨m slot tr·ªëng cho receptionist - batch check
    let slot = null;

    // Pre-check 5 slots c√πng l√∫c ƒë·ªÉ t·ªëi ∆∞u
    const slotsToCheck = [];
    let currentTime = adjustedTime;
    let currentTemplate = template;

    for (let i = 0; i < 5; i++) {
      slotsToCheck.push({
        date: exam_date,
        timeSlot: currentTime,
        IdPhongKham: IdPhongKham, 
        template: currentTemplate
      });

      if (i < 4) {
        const nextTemplate = findNextAvailableSlot(currentTime, allTemplates);
        if (!nextTemplate) break;
        currentTime = nextTemplate.time;
        currentTemplate = nextTemplate;
      }
    }

    // Batch query ƒë·ªÉ check t·∫•t c·∫£ slots c√πng l√∫c
    const existingSlots = await ScheduleSlot.find({
      date: exam_date,
      timeSlot: { $in: slotsToCheck.map(s => s.timeSlot) },
      IdPhongKham: IdPhongKham
    }).lean();
    
    console.log(`üîç [SLOT] T√¨m th·∫•y ${existingSlots.length} slots kh·ªõp v·ªõi khung gi·ªù v√† ph√≤ng kh√°m`);
    console.log(`üîç [SLOT] C√°c khung gi·ªù c·∫ßn ki·ªÉm tra: ${slotsToCheck.map(s => s.timeSlot).join(', ')}`);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y slots n√†o cho ph√≤ng n√†y, c√≥ th·ªÉ c·∫ßn t·∫°o m·ªõi cho t·∫•t c·∫£ khung gi·ªù m·∫´u
    if (existingSlots.length === 0 && existingSlotsForRoom.length === 0 && role === 'receptionist') {
      console.log(`üîç [SLOT] Ph√≤ng m·ªõi - t·∫°o slot ƒë·∫ßu ti√™n cho ph√≤ng ${IdPhongKham}`);
      try {
        slot = await ScheduleSlot.create({
          date: exam_date,
          timeSlot: adjustedTime,
          IdPhongKham: IdPhongKham,
          capacity: template.capacity,
          currentCount: 1,
          is_active: true
        });
        // T·∫°o th√†nh c√¥ng, tr·∫£ v·ªÅ k·∫øt qu·∫£ lu√¥n
        return {
          slot,
          adjustedTime
        };
      } catch (err) {
        if (err.code !== 11000) { // B·ªè qua l·ªói duplicate key
          throw err;
        }
        // N·∫øu tr√πng key, ti·∫øp t·ª•c logic d∆∞·ªõi ƒë√¢y
      }
    }

    // T√¨m slot c√≥ th·ªÉ s·ª≠ d·ª•ng
    for (const slotInfo of slotsToCheck) {
      const existingSlot = existingSlots.find(s => s.timeSlot === slotInfo.timeSlot);
      console.log(`üîç [SLOT] Ki·ªÉm tra slot ${slotInfo.timeSlot}: ${existingSlot ? `ƒê√£ t·ªìn t·∫°i (${existingSlot.currentCount}/${existingSlot.capacity})` : 'Ch∆∞a t·ªìn t·∫°i'}`);

      // N·∫øu slot ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
      if (!existingSlot) {
        try {
          console.log(`üîç [SLOT] T·∫°o m·ªõi slot cho ph√≤ng ${IdPhongKham}, gi·ªù ${slotInfo.timeSlot}`);
          slot = await ScheduleSlot.create({
            date: exam_date,
            timeSlot: slotInfo.timeSlot,
            IdPhongKham: slotInfo.IdPhongKham,
            capacity: slotInfo.template.capacity,
            currentCount: 1,
            is_active: true
          });
          adjustedTime = slotInfo.timeSlot;
          break;
        } catch (err) {
          console.log(`‚ùå [SLOT] L·ªói khi t·∫°o slot: ${err.message}, code: ${err.code}`);
          if (err.code === 11000) continue;
          throw err;
        }
      }

      // N·∫øu slot c√≤n ch·ªó tr·ªëng
      if (existingSlot && existingSlot.currentCount < existingSlot.capacity) {
        console.log(`üîç [SLOT] C·∫≠p nh·∫≠t slot hi·ªán c√≥: ${existingSlot.timeSlot}, count: ${existingSlot.currentCount} -> ${existingSlot.currentCount + 1}`);
        const updatedSlot = await ScheduleSlot.findByIdAndUpdate(
          existingSlot._id,
          { $inc: { currentCount: 1 } },
          { new: true }
        );

        if (updatedSlot && updatedSlot.currentCount <= updatedSlot.capacity) {
          slot = updatedSlot;
          adjustedTime = slotInfo.timeSlot;
          break;
        }
      }

      if (role !== 'receptionist') {
        throw new Error('Slot ƒë√£ ƒë·∫ßy, vui l√≤ng ch·ªçn khung gi·ªù kh√°c');
      }
    }

    if (!slot) {
      console.log(`‚ùå [SLOT] Kh√¥ng t√¨m th·∫•y slot ph√π h·ª£p cho ph√≤ng ${IdPhongKham} sau khi ki·ªÉm tra t·∫•t c·∫£ khung gi·ªù`);
      throw new Error('Kh√¥ng t√¨m th·∫•y khung gi·ªù tr·ªëng n√†o trong ng√†y');
    }

    console.log(`‚úÖ [SLOT] T√¨m th·∫•y slot ph√π h·ª£p: ph√≤ng ${IdPhongKham}, gi·ªù ${adjustedTime}, slot ID: ${slot._id}`);
    return {
      slot,
      adjustedTime
    };
  }

  // === T·∫°o l·ªãch kh√°m v·ªõi order number logic fixed ===
  async createExam(data) {
    // S·ª≠ d·ª•ng IdPhongKham cho slot v√† queue logic
    const { slot, adjustedTime } = await this.getOrCreateSlot(data.exam_date, data.exam_time, data.IdPhongKham, data.role);

    // C·∫≠p nh·∫≠t l·∫°i gi·ªù kh√°m n·∫øu c√≥ ƒëi·ªÅu ch·ªânh
    data.exam_time = adjustedTime;
    data.status = data.role === 'receptionist' ? 'accept' : 'pending';
    data.slotId = slot._id;
    data.IdPhongKham = slot.IdPhongKham;

    // L·∫•y order number TR∆Ø·ªöC khi t·∫°o exam n·∫øu status l√† accept
    if (data.status === 'accept') {
      // Format ng√†y ƒë√∫ng
      const examDate = new Date(data.exam_date);
      console.log(`üî¢ [CREATE_EXAM] T·∫°o l·ªãch kh√°m m·ªõi cho ng√†y: ${examDate.toLocaleDateString()} v·ªõi status: ${data.status}`);
      
      const maxOrder = await healthInsuranceExamRepository.findMaxOrderNumber(examDate);
      data.order_number = maxOrder + 1;
      console.log(`üî¢ [CREATE_EXAM] G√°n s·ªë th·ª© t·ª±: ${data.order_number} cho l·ªãch kh√°m m·ªõi`);
    }

    // Parallel operations sau khi ƒë√£ c√≥ order_number
    const [exam, phongKhamObj] = await Promise.all([
      healthInsuranceExamRepository.create(data),
      (async () => {
        const PhongKham = (await import('../../models/phong-kham.model.js')).default;
        return PhongKham.findOne({ _id: data.IdPhongKham }, 'ten').lean();
      })()
    ]);

    // N·∫øu status l√† accept (role l√† receptionist), ƒë·∫©y ngay l√™n HIS v√† ƒë·ª£i k·∫øt qu·∫£
    if (data.status === 'accept') {
      console.log('üè• [HIS] ƒê·∫©y d·ªØ li·ªáu l√™n HIS cho b·∫£n ghi c√≥ status accept');
      
      // ƒê·ª£i k·∫øt qu·∫£ t·ª´ HIS
      const hisResult = await this.pushToHIS(exam);
      
      // N·∫øu kh√¥ng th√†nh c√¥ng, tr·∫£ v·ªÅ l·ªói
      if (!hisResult.success) {
        // L·∫•y th√¥ng tin l·ªói chi ti·∫øt t·ª´ k·∫øt qu·∫£
        const errorDetails = hisResult.details && Object.keys(hisResult.details).length > 0 
          ? JSON.stringify(hisResult.details) 
          : hisResult.error;
        
        throw new Error(`Kh√¥ng th·ªÉ ƒë·∫©y d·ªØ li·ªáu l√™n HIS: ${errorDetails}`);
      }
      
      console.log('‚úÖ [HIS] ƒê·∫©y d·ªØ li·ªáu l√™n HIS th√†nh c√¥ng');
    }

    const encodedId = Buffer.from(exam._id.toString()).toString('base64');
    const qrImageBase64 = await QRCode.toDataURL(encodedId);

    return {
      exam: {
        ...exam.toObject(),
        IdPhongKham: exam.IdPhongKham, // id
        clinic: phongKhamObj?.ten || '' // top-level field
      },
      qr_code: qrImageBase64,
      encoded_id: encodedId
    };
  }

  // === Check l·ªãch kh√°m theo QR code v·ªõi parallel operations ===
  async checkExamByEncodedId(encodedId) {
    let id;
    try { id = Buffer.from(encodedId, 'base64').toString('utf-8'); } 
    catch { throw new Error('QR code kh√¥ng h·ª£p l·ªá'); }

    const exam = await healthInsuranceExamRepository.findById(id);
    if (!exam) throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m');

    const now = new Date();
    const [h,m] = exam.exam_time.split(':').map(Number);
    const examDateTime = new Date(exam.exam_date); examDateTime.setHours(h,m,0,0);

    if (now < examDateTime) return { valid: false, message: 'Ch∆∞a t·ªõi gi·ªù kh√°m', exam };

    if ((now - examDateTime)/(1000*60) > 15) {
      // Atomic update ƒë·ªÉ reject exam
      await healthInsuranceExamRepository.updateOrderNumber(exam._id, null, 'reject');
      return { valid: false, message: 'L·ªãch kh√°m b·ªã h·ªßy do t·ªõi tr·ªÖ qu√° 15 ph√∫t', exam };
    }

    if (exam.status !== 'accept') {
      // L·∫•y max order number tr∆∞·ªõc - l·ªçc theo ng√†y hi·ªán t·∫°i
      const today = new Date();
      today.setHours(0,0,0,0);
      
      console.log(`üî¢ [CHECK_EXAM] C·∫≠p nh·∫≠t status th√†nh accept cho l·ªãch kh√°m ID: ${exam._id}`);
      console.log(`üî¢ [CHECK_EXAM] T√¨m s·ªë th·ª© t·ª± ti·∫øp theo cho ng√†y: ${today.toLocaleDateString()}`);
      
      const maxOrder = await healthInsuranceExamRepository.findMaxOrderNumber(today);
      const newOrderNumber = maxOrder + 1;
      
      console.log(`üî¢ [CHECK_EXAM] G√°n s·ªë th·ª© t·ª±: ${newOrderNumber} cho l·ªãch kh√°m`);
      
      // Update exam v·ªõi order number v√† status
      const updatedExam = await healthInsuranceExamRepository.updateOrderNumber(exam._id, newOrderNumber, 'accept');
      
      // C·∫≠p nh·∫≠t object exam ƒë·ªÉ tr·∫£ v·ªÅ ƒë√∫ng
      exam.status = 'accept';
      exam.order_number = newOrderNumber;
      
      // ƒê·∫©y l√™n HIS ngay sau khi update status th√†nh accept v√† ƒë·ª£i k·∫øt qu·∫£
      console.log('üè• [HIS] ƒê·∫©y d·ªØ li·ªáu l√™n HIS sau khi update status');
      const hisResult = await this.pushToHIS(updatedExam);
      
      if (!hisResult.success) {
        // Log l·ªói nh∆∞ng v·∫´n cho ph√©p check-in th√†nh c√¥ng v√¨ ƒë√£ c·∫≠p nh·∫≠t status v√† order_number
        console.error('‚ùå [HIS] L·ªói khi ƒë·∫©y d·ªØ li·ªáu l√™n HIS sau khi update status:', 
          hisResult.details ? JSON.stringify(hisResult.details) : hisResult.error);
        
        // V·∫´n cho ph√©p check-in th√†nh c√¥ng nh∆∞ng th√™m th√¥ng tin l·ªói
        return { 
          valid: true, 
          message: 'L·ªãch kh√°m h·ª£p l·ªá, check-in th√†nh c√¥ng. L∆∞u √Ω: Kh√¥ng th·ªÉ ƒë·ªìng b·ªô v·ªõi HIS.', 
          exam,
          warning: 'Kh√¥ng th·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi HIS. Vui l√≤ng ki·ªÉm tra l·∫°i sau.'
        };
      }
    }

    return { valid: true, message: 'L·ªãch kh√°m h·ª£p l·ªá, check-in th√†nh c√¥ng', exam };
  }

  // Cache token HIS
  hisTokenCache = {
    access_token: null,
    expiresAt: null
  }

  // === L·∫•y token HIS v·ªõi caching ===
  async getHISToken() {
    console.log('üîë [HIS] Ki·ªÉm tra token HIS');
    
    // Ki·ªÉm tra token cache c√≤n h·∫°n kh√¥ng
    if (this.hisTokenCache.access_token && 
        this.hisTokenCache.expiresAt > Date.now()) {
      console.log('üîë [HIS] S·ª≠ d·ª•ng token HIS ƒë√£ cache');
      return this.hisTokenCache.access_token;
    }
    
    try {
      const { API_LOGIN_HIS_333, HIS_ACCOUNT, HIS_PASSWORD, CLIENT_ID_HIS } = process.env;
      
      if (!API_LOGIN_HIS_333 || !HIS_ACCOUNT || !HIS_PASSWORD) {
        throw new Error('Thi·∫øu th√¥ng tin c·∫•u h√¨nh k·∫øt n·ªëi HIS');
      }
      
      console.log('üîë [HIS] ƒêang l·∫•y token m·ªõi t·ª´:', API_LOGIN_HIS_333);
      
      // T·∫°o params theo ƒë·ªãnh d·∫°ng form-urlencoded
      const params = new URLSearchParams();
      params.append('client_id', CLIENT_ID_HIS);
      params.append('grant_type', 'password');
      params.append('username', HIS_ACCOUNT);
      params.append('password', HIS_PASSWORD);
            
      // Headers cho form-urlencoded
      const headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
      };
    

      // G·ª≠i request v·ªõi params v√† agent
      const response = await axios.post(API_LOGIN_HIS_333, params, { headers, httpsAgent: this.agent});
      
      
      console.log('‚úÖ [HIS] Nh·∫≠n ph·∫£n h·ªìi t·ª´ server HIS:', response.status);
      
      if (!response.data || !response.data.access_token) {
        console.error('‚ùå [HIS] Ph·∫£n h·ªìi kh√¥ng c√≥ access_token:', response.data);
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c access_token t·ª´ HIS');
      }
      
      // Cache token v·ªõi th·ªùi h·∫°n - gi·∫£m 60s ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
      const expiresIn = response.data.expires_in || 3600; // M·∫∑c ƒë·ªãnh 1 gi·ªù n·∫øu kh√¥ng c√≥
      this.hisTokenCache = {
        access_token: response.data.access_token,
        expiresAt: Date.now() + (expiresIn - 60) * 1000
      };
      
      console.log('üîë [HIS] ƒê√£ l·∫•y ƒë∆∞·ª£c token HIS m·ªõi, h·∫øt h·∫°n sau:', expiresIn, 'gi√¢y');
      return this.hisTokenCache.access_token;
      
    } catch (error) {
      console.error('‚ùå [HIS] L·ªói khi l·∫•y token HIS:', error.message);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y token HIS: ${error.message}`);
    }
  }
  async pushToHIS(exam) {
    console.log('üè• [HIS] ƒê·∫©y th√¥ng tin l√™n HIS:', exam._id);
    try {
      // 1. L·∫•y token tr∆∞·ªõc khi g·ªçi API
      const token = await this.getHISToken();
      
      // 2. L·∫•y API URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
      const { API_PUSH_TO_HIS_333 } = process.env;
      if (!API_PUSH_TO_HIS_333) {
        throw new Error('Thi·∫øu c·∫•u h√¨nh API_PUSH_TO_HIS_333');
      }
      
      console.log('üè• [HIS] Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i l√™n HIS');
      
      // ƒê·ªãnh d·∫°ng ng√†y gi·ªù cho t·∫•t c·∫£ c√°c tr∆∞·ªùng ng√†y th√°ng
      // FORMAT: HH:MM mm/dd/yyyy (gi·ªù:ph√∫t th√°ng/ng√†y/nƒÉm) theo y√™u c·∫ßu API HIS
      // Ng√†y sinh ch·ªâ c·∫ßn d·∫°ng mm/dd/yyyy (kh√¥ng c·∫ßn gi·ªù)
      
      // L·∫•y ph√≤ng kh√°m
      const PhongKham = (await import('../../models/phong-kham.model.js')).default;
      const clinic = await PhongKham.findById(exam.IdPhongKham).lean();
      
      // L·∫•y th√¥ng tin BHYT t·ª´ cache n·∫øu c√≥ v√† ch·ªâ khi type l√† BHYT
      let dmBHYT = null;
      
      // L∆∞u BHYT v√† CCCD keys ƒë·ªÉ x·ª≠ l√Ω cache sau khi push l√™n HIS
      const bhytKey = exam.BHYT;
      const cccdKey = exam.CCCD;
      
      // Ch·ªâ t√¨m th√¥ng tin BHYT khi exam_type l√† 'BHYT'
      if (exam.exam_type === 'BHYT') {
        // Log th√¥ng tin v·ªÅ cache BHYT hi·ªán t·∫°i
        console.log('üîç [BHYT_CACHE] Th√¥ng tin cache BHYT hi·ªán t·∫°i:');
        console.log('   - T·ªïng s·ªë cache:', Object.keys(this.bhytResultCache).length);
        console.log('   - C√°c kh√≥a c√≥ trong cache:', Object.keys(this.bhytResultCache));
        
        console.log('   - ƒêang t√¨m m√£ th·∫ª BHYT:', bhytKey);
        console.log('   - ƒêang t√¨m m√£ CCCD:', cccdKey);
        console.log('   - BHYT c√≥ t·ªìn t·∫°i trong cache:', !!this.bhytResultCache[bhytKey]);
        console.log('   - CCCD c√≥ t·ªìn t·∫°i trong cache:', !!this.bhytResultCache[cccdKey]);
        
        // Ki·ªÉm tra tr∆∞·ªùng BHYT tr∆∞·ªõc
        if (bhytKey && this.bhytResultCache[bhytKey]) {
          try {
            // L·∫•y d·ªØ li·ªáu t·ª´ cache v√† ƒë·∫£m b·∫£o n√≥ l√† ƒë·ªëi t∆∞·ª£ng h·ª£p l·ªá
            const cachedData = this.bhytResultCache[bhytKey];
            
            console.log('üîç [BHYT_CACHE] D·ªØ li·ªáu cache t√¨m th·∫•y t·ª´ BHYT:', JSON.stringify(cachedData, null, 2));
            
            // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ph·∫£i l√† ƒë·ªëi t∆∞·ª£ng v√† c√≥ thu·ªôc t√≠nh c·∫ßn thi·∫øt kh√¥ng
            if (cachedData && typeof cachedData === 'object' && cachedData.SoBHYT && cachedData.HoVaTen) {
              dmBHYT = cachedData;
              console.log('üè• [HIS] S·ª≠ d·ª•ng th√¥ng tin BHYT t·ª´ cache (m√£ BHYT):', bhytKey);
            } else {
              console.warn('üè• [HIS] D·ªØ li·ªáu BHYT cache kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, b·ªè qua');
              console.warn('üè• [HIS] Chi ti·∫øt d·ªØ li·ªáu:', 
                cachedData ? `Lo·∫°i: ${typeof cachedData}, C√≥ SoBHYT: ${!!cachedData.SoBHYT}, C√≥ HoVaTen: ${!!cachedData.HoVaTen}` : 'null');
            }
          } catch (error) {
            console.error('‚ùå [HIS] L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu BHYT t·ª´ cache (m√£ BHYT):', error.message);
          }
        } 
        
        // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ BHYT, th·ª≠ t√¨m t·ª´ CCCD
        if (!dmBHYT && cccdKey && this.bhytResultCache[cccdKey]) {
          try {
            // L·∫•y d·ªØ li·ªáu t·ª´ cache v√† ƒë·∫£m b·∫£o n√≥ l√† ƒë·ªëi t∆∞·ª£ng h·ª£p l·ªá
            const cachedData = this.bhytResultCache[cccdKey];
            
            console.log('üîç [BHYT_CACHE] D·ªØ li·ªáu cache t√¨m th·∫•y t·ª´ CCCD:', JSON.stringify(cachedData, null, 2));
            
            // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ph·∫£i l√† ƒë·ªëi t∆∞·ª£ng v√† c√≥ thu·ªôc t√≠nh c·∫ßn thi·∫øt kh√¥ng
            if (cachedData && typeof cachedData === 'object' && cachedData.SoBHYT && cachedData.HoVaTen) {
              dmBHYT = cachedData;
              console.log('üè• [HIS] S·ª≠ d·ª•ng th√¥ng tin BHYT t·ª´ cache (m√£ CCCD):', cccdKey);
            } else {
              console.warn('üè• [HIS] D·ªØ li·ªáu BHYT cache t·ª´ CCCD kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, b·ªè qua');
            }
          } catch (error) {
            console.error('‚ùå [HIS] L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu BHYT t·ª´ cache (m√£ CCCD):', error.message);
          }
        }
        
        // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, log th√¥ng b√°o
        if (!dmBHYT && (bhytKey || cccdKey)) {
          console.log('üè• [HIS] Kh√¥ng t√¨m th·∫•y th√¥ng tin BHYT trong cache cho c·∫£ BHYT v√† CCCD');
          console.log('üè• [HIS] C√°c m√£ th·∫ª hi·ªán c√≥ trong cache:', Object.keys(this.bhytResultCache).join(', ') || 'Kh√¥ng c√≥');
        }
      } else {
        console.log('üè• [HIS] Kh√¥ng t√¨m th√¥ng tin BHYT v√¨ exam_type l√†:', exam.exam_type);
      }
      
      // 4. C·∫•u tr√∫c d·ªØ li·ªáu theo y√™u c·∫ßu c·ªßa API HIS
      const basePayload = {
        GioiTinh: exam.GioiTinh === 'Nam',
        IdDanToc: exam.IdDanToc,
        TenDanToc: exam.TenDanToc,
        IdQuocTich: exam.IdQuocTich,
        MaDoiTuongKCB: exam.exam_type === 'BHYT' ? "3.3" : "9",
        MaTinh: exam.MaTinh,
        TenTinh: exam.TenTinh,
        IdTinhThanh: exam.IdTinhThanh,
        IdXaPhuong: exam.IdXaPhuong,
        IdBenhVien: process.env.ID_BENHVIEN_HIS,
        IdKhoaKham: exam.IdKhoaKham,
        IsDonTiepCCCD: !!exam.CCCD,
        CMNDNoiCap: process.env.NOI_CAP_CCCD_HIS,
        CMNDNgayCap: this.formatDisplayDateTime(exam.CMNDNgayCap, false),
        IsMSTCaNhan: true,
        MaXa: exam.MaXa,
        TenXa: exam.TenXa,
        MaPhongKham: exam.MaPhongKham,
        TenPhongKham: exam.TenPhongKham,
        IdPhongKham: exam.IdPhongKham,
        IdLoaiKham: exam.IdLoaiKham,
        HoTen: exam.HoTen,
        DienThoai: exam.DienThoai,
        SoNha: exam.SoNha,
        IdNgheNghiep: exam.IdNgheNghiep,
        TenNgheNghiep: exam.TenNgheNghiep || "Kh√°c",
        NgaySinh: this.formatDisplayDateTime(exam.NgaySinh, false),
        DiaChi: exam.DiaChi,
        IdCanBoDonTiep: process.env.ID_CANBO_HIS||"3923362b-5ec4-4d11-ae0f-684001f67748",
        IdCongKhamBanDau: exam.IdCongKhamBanDau,
        NgayKham: this.formatDisplayDateTime(new Date()),
        NgayDonTiep: this.formatDisplayDateTime(new Date()),
        Status: 0
      };
      
      // N·∫øu l√† BHYT, th√™m c√°c tr∆∞·ªùng b·ªï sung
      const payload = exam.exam_type === 'BHYT' 
        ? {
            ...basePayload,
            // Th√¥ng tin BHYT ch·ªâ ƒë∆∞·ª£c th√™m khi c√≥ d·ªØ li·ªáu h·ª£p l·ªá
            ...(dmBHYT && { DmBHYT: dmBHYT }),
            // Th√™m c√°c tr∆∞·ªùng b·∫Øt bu·ªôc cho BHYT
            IsBHYT: !!dmBHYT,
            IsDungTuyen: !!dmBHYT,
            SoBHYT: dmBHYT ? dmBHYT.SoBHYT : exam.SoBHYT,
            CMND: exam.CCCD,
            
          }
        : basePayload; // N·∫øu l√† DV, ch·ªâ d√πng c√°c tr∆∞·ªùng c∆° b·∫£n
      
      // Log ƒë·∫ßy ƒë·ªß payload ƒë·ªÉ debug
      console.log('üè• [HIS] Chi ti·∫øt payload g·ª≠i l√™n HIS:', JSON.stringify(payload, null, 2));
      
      
      // 5. G·ªçi API v·ªõi token trong header v√† timeout h·ª£p l√Ω
      const response = await axios.post(API_PUSH_TO_HIS_333, payload, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
          
        },
        httpsAgent: this.agent,
        timeout: 30000 // Timeout 30s
      });
      
      // Ki·ªÉm tra response c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
      console.log('‚úÖ [HIS] Ph·∫£n h·ªìi t·ª´ API HIS:', response.status, response.statusText);
      console.log('‚úÖ [HIS] Data ph·∫£n h·ªìi:', JSON.stringify(response.data, null, 2));
      
      // Ki·ªÉm tra n·∫øu response c√≥ ch·ª©a m√£ l·ªói n·ªôi b·ªô t·ª´ API
      if (response.data && response.data.statusCode && response.data.statusCode !== 200) {
        console.error('‚ùå [HIS] API tr·∫£ v·ªÅ m√£ l·ªói:', response.data.statusCode);
        return {
          success: false,
          error: `API HIS tr·∫£ v·ªÅ m√£ l·ªói: ${response.data.statusCode}`,
          details: response.data
        };
      }
      
      // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong response
      if (!response.data || (typeof response.data === 'object' && Object.keys(response.data).length === 0)) {
        console.error('‚ùå [HIS] API tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng');
        return {
          success: false,
          error: 'API HIS tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng',
          details: response.data
        };
      }
      
      console.log('‚úÖ [HIS] ƒê·∫©y th√¥ng tin l√™n HIS th√†nh c√¥ng:', exam._id);
      
      // 6. Tr·∫£ v·ªÅ k·∫øt qu·∫£
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      // Log l·ªói chi ti·∫øt
      console.error(`‚ùå [HIS] L·ªói: ${error.message} | B·ªánh nh√¢n: ${exam.HoTen} (ID: ${exam._id})`);
      
      // Ph√¢n lo·∫°i l·ªói ƒë·ªÉ d·ªÖ debug
      if (error.code === 'ECONNABORTED') {
        console.error('‚ùå [HIS] L·ªói timeout khi k·∫øt n·ªëi ƒë·∫øn API HIS');
        return {
          success: false,
          error: 'K·∫øt n·ªëi ƒë·∫øn HIS b·ªã timeout',
          errorCode: 'TIMEOUT',
          details: { message: error.message }
        };
      }
      
      // L·ªói network
      if (!error.response) {
        console.error('‚ùå [HIS] L·ªói k·∫øt n·ªëi m·∫°ng:', error.message);
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn HIS',
          errorCode: 'NETWORK',
          details: { message: error.message }
        };
      }
      
      // L·ªói response t·ª´ server
      if (error.response) {
        console.error('‚ùå [HIS] M√£ l·ªói t·ª´ server:', error.response.status);
        console.error('‚ùå [HIS] Data l·ªói:', JSON.stringify(error.response.data, null, 2));
        
        // Ph√¢n lo·∫°i theo m√£ HTTP
        if (error.response.status === 401) {
          return {
            success: false,
            error: 'Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá',
            errorCode: 'AUTH',
            details: error.response.data || {}
          };
        } else if (error.response.status === 400) {
          return {
            success: false,
            error: 'D·ªØ li·ªáu g·ª≠i ƒëi kh√¥ng h·ª£p l·ªá',
            errorCode: 'BAD_REQUEST',
            details: error.response.data || {}
          };
        } else {
          return {
            success: false,
            error: `L·ªói server HIS (${error.response.status})`,
            errorCode: 'SERVER',
            details: error.response.data || {}
          };
        }
      }
      
      // L·ªói kh√¥ng x√°c ƒë·ªãnh
      return {
        success: false,
        error: error.message,
        errorCode: 'UNKNOWN',
        details: {}
      };
    } finally {
      // X√≥a cache BHYT sau khi ƒë·∫©y l√™n HIS (th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i)
      const bhytKey = exam.BHYT;
      const cccdKey = exam.CCCD;
      
      if (bhytKey || cccdKey) {
        if (bhytKey && this.bhytResultCache[bhytKey]) {
          delete this.bhytResultCache[bhytKey];
          console.log('üßπ [BHYT_CACHE] ƒê√£ x√≥a cache BHYT sau khi push l√™n HIS:', bhytKey);
        }
        
        if (cccdKey && this.bhytResultCache[cccdKey]) {
          delete this.bhytResultCache[cccdKey];
          console.log('üßπ [BHYT_CACHE] ƒê√£ x√≥a cache CCCD sau khi push l√™n HIS:', cccdKey);
        }
        
        console.log('üßπ [BHYT_CACHE] S·ªë l∆∞·ª£ng m√£ th·∫ª c√≤n l·∫°i trong cache:', Object.keys(this.bhytResultCache).length);
      }
    }
  }

  // === L·∫•y t·∫•t c·∫£ l·ªãch kh√°m v·ªõi ph√¢n trang ===
  async getAllExams(options = {}) {
    console.log('üîç [EXAM_SERVICE] L·∫•y danh s√°ch l·ªãch kh√°m v·ªõi options:', options);
    
    try {
      // X·ª≠ l√Ω c√°c tham s·ªë ƒë·∫ßu v√†o
      const queryOptions = {
        page: options.page ? parseInt(options.page) : 1, // M·∫∑c ƒë·ªãnh trang 1
        limit: options.limit ? parseInt(options.limit) : 10, // M·∫∑c ƒë·ªãnh 10 b·∫£n ghi/trang
        sortBy: options.sortBy || 'createdAt', // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo ng√†y t·∫°o
        sortOrder: -1, // Lu√¥n s·∫Øp x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈© (gi·∫£m d·∫ßn)
        filters: {}
      };
      
      // X·ª≠ l√Ω c√°c filter t·ª´ query params
      if (options.status) queryOptions.filters.status = options.status;
      if (options.exam_type) queryOptions.filters.exam_type = options.exam_type;
      if (options.IdPhongKham) queryOptions.filters.IdPhongKham = options.IdPhongKham;
      
      // X·ª≠ l√Ω t√¨m ki·∫øm theo ng√†y kh√°m
      if (options.exam_date) {
        const examDate = new Date(options.exam_date);
        if (!isNaN(examDate.getTime())) {
          // T·∫°o kho·∫£ng th·ªùi gian cho ng√†y (t·ª´ 00:00 ƒë·∫øn 23:59:59)
          const startDate = new Date(examDate);
          startDate.setHours(0, 0, 0, 0);
          
          const endDate = new Date(examDate);
          endDate.setHours(23, 59, 59, 999);
          
          queryOptions.filters.exam_date = { $gte: startDate, $lte: endDate };
        }
      }
      
      // G·ªçi repository ƒë·ªÉ l·∫•y d·ªØ li·ªáu - tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c tr∆∞·ªùng trong model nguy√™n b·∫£n
      const result = await healthInsuranceExamRepository.findAll(queryOptions);
      
      console.log(`‚úÖ [EXAM_SERVICE] L·∫•y th√†nh c√¥ng ${result.data.length}/${result.total} l·ªãch kh√°m`);
      return result;
      
    } catch (error) {
      console.error('‚ùå [EXAM_SERVICE] L·ªói khi l·∫•y danh s√°ch l·ªãch kh√°m:', error.message);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch l·ªãch kh√°m: ${error.message}`);
    }
  }
  
  // Helper method ƒë·ªÉ th√™m th√¥ng tin ph√≤ng kh√°m v√†o danh s√°ch l·ªãch kh√°m
  // === C·∫≠p nh·∫≠t th√¥ng tin l·ªãch kh√°m ===
  async updateExam(id, data) {
    console.log('üîÑ [EXAM_SERVICE] C·∫≠p nh·∫≠t l·ªãch kh√°m:', id);
    
    try {
      // Ki·ªÉm tra xem l·ªãch kh√°m c√≥ t·ªìn t·∫°i kh√¥ng
      const exam = await healthInsuranceExamRepository.findById(id);
      if (!exam) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m');
      }
      
      // Lo·∫°i b·ªè c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t
      const allowedUpdates = { 
        ...data 
      };
      
      // Kh√¥ng cho ph√©p thay ƒë·ªïi m·ªôt s·ªë tr∆∞·ªùng quan tr·ªçng
      delete allowedUpdates._id;
      delete allowedUpdates.is_deleted;
      delete allowedUpdates.created_at;
      delete allowedUpdates.updated_at;
      
      // C·∫≠p nh·∫≠t l·ªãch kh√°m
      const updatedExam = await healthInsuranceExamRepository.update(id, allowedUpdates);
      
      console.log('‚úÖ [EXAM_SERVICE] C·∫≠p nh·∫≠t l·ªãch kh√°m th√†nh c√¥ng:', id);
      return updatedExam;
    } catch (error) {
      console.error('‚ùå [EXAM_SERVICE] L·ªói khi c·∫≠p nh·∫≠t l·ªãch kh√°m:', error.message);
      throw new Error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch kh√°m: ${error.message}`);
    }
  }
  
  // === X√≥a l·ªãch kh√°m ===
  async deleteExam(id) {
    console.log('üóëÔ∏è [EXAM_SERVICE] X√≥a l·ªãch kh√°m:', id);
    
    try {
      // Ki·ªÉm tra xem l·ªãch kh√°m c√≥ t·ªìn t·∫°i kh√¥ng
      const exam = await healthInsuranceExamRepository.findById(id);
      if (!exam) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m');
      }
      
      // X√≥a l·ªãch kh√°m (soft delete)
      await healthInsuranceExamRepository.remove(id);
      
      console.log('‚úÖ [EXAM_SERVICE] X√≥a l·ªãch kh√°m th√†nh c√¥ng:', id);
      return { success: true, message: 'X√≥a l·ªãch kh√°m th√†nh c√¥ng' };
    } catch (error) {
      console.error('‚ùå [EXAM_SERVICE] L·ªói khi x√≥a l·ªãch kh√°m:', error.message);
      throw new Error(`Kh√¥ng th·ªÉ x√≥a l·ªãch kh√°m: ${error.message}`);
    }
  }
}

export default new HealthInsuranceExamService();
