import healthInsuranceExamService from '../services/health-insurance-exam.service.js';

/**
 * @swagger
 * /api/health-insurance-exams/check-bhyt-date:
 *   post:
 *     summary: Ki·ªÉm tra th√¥ng tin CCCD qua API qu·ªëc gia
 *     tags:
 *       - HealthInsuranceExam
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - maThe
 *               - hoTen
 *               - ngaySinh
 *             properties:
 *               maThe:
 *                 type: string
 *                 description: M√£ CCCD
 *               hoTen:
 *                 type: string
 *                 description: H·ªç t√™n ng∆∞·ªùi kh√°m
 *               ngaySinh:
 *                 type: string
 *                 description: "Ng√†y sinh (dd/mm/yyyy, v√≠ d·ª• 25/08/1990)"
 *           example:
 *             maThe: "001205036719"
 *             hoTen: "Nguyen Van A"
 *             ngaySinh: "25/08/1990"
 *     responses:
 *       200:
 *         description: Th√¥ng tin CCCD h·ª£p l·ªá
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   description: Th√¥ng tin tr·∫£ v·ªÅ t·ª´ API qu·ªëc gia
 *       400:
 *         description: Th√¥ng tin CCCD kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói x√°c th·ª±c
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 */

// ...existing code...
const checkBHYTCard = async (req, res) => {
  try {
    const { maThe, hoTen, ngaySinh } = req.body;
    if (!maThe || !hoTen || !ngaySinh) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu th√¥ng tin m√£ CCCD, h·ªç t√™n ho·∫∑c ng√†y sinh' });
    }
    const result = await healthInsuranceExamService.checkBHYTCard({ maThe, hoTen, ngaySinh });
    return res.status(result.success ? 200 : 400).json(result);
  } catch (error) {
    return res.status(400).json({ success: false, message: error.message });
  }
};


/**
 * @swagger
 * /api/health-insurance-exams/book:
 *   post:
 *     summary: ƒê·∫∑t l·ªãch kh√°m b·∫£o hi·ªÉm y t·∫ø
 *     tags:
 *       - HealthInsuranceExam
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - HoTen
 *               - DienThoai
 *               - NgaySinh
 *               - GioiTinh
 *               - DiaChi
 *               - IdPhongKham
 *               - MaPhongKham
 *               - TenPhongKham
 *               - IdLoaiKham
 *               - MaTinh
 *               - TenTinh
 *               - IdTinhThanh
 *               - MaXa
 *               - TenXa
 *               - IdXaPhuong
 *               - IdDanToc
 *               - TenDanToc
 *               - IdQuocTich
 *               - IdKhoaKham
 *               - IdNgheNghiep
 *               - TenNgheNghiep
 *               - IdCanBoDonTiep
 *               - IdBenhVien
 *               - exam_type
 *               - exam_date
 *               - exam_time
 *               - IsDonTiepCCCD
 *             properties:
 *               HoTen:
 *                 type: string
 *                 description: H·ªç t√™n b·ªánh nh√¢n
 *               DienThoai:
 *                 type: string
 *                 description: S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá
 *               email:
 *                 type: string
 *                 format: email
 *                 description: Email li√™n h·ªá (kh√¥ng b·∫Øt bu·ªôc)
 *               CCCD:
 *                 type: string
 *                 description: S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n (b·∫Øt bu·ªôc n·∫øu IsDonTiepCCCD=true)
 *               NgaySinh:
 *                 type: string
 *                 format: date
 *                 description: Ng√†y sinh b·ªánh nh√¢n
 *               GioiTinh:
 *                 type: string
 *                 enum: [Nam, N·ªØ, Kh√°c]
 *                 description: Gi·ªõi t√≠nh b·ªánh nh√¢n
 *               DiaChi:
 *                 type: string
 *                 description: ƒê·ªãa ch·ªâ li√™n h·ªá
 *               BHYT:
 *                 type: string
 *                 description: S·ªë b·∫£o hi·ªÉm y t·∫ø (kh√¥ng b·∫Øt bu·ªôc)
 *               
 *               # Th√¥ng tin ph√≤ng kh√°m
 *               IdPhongKham:
 *                 type: string
 *                 description: ID ph√≤ng kh√°m 
 *               MaPhongKham:
 *                 type: string
 *                 description: M√£ ph√≤ng kh√°m
 *               TenPhongKham:
 *                 type: string
 *                 description: T√™n ph√≤ng kh√°m
 *               
 *               # Th√¥ng tin lo·∫°i kh√°m
 *               IdLoaiKham:
 *                 type: string
 *                 description: ID lo·∫°i kh√°m
 *               
 *               # Th√¥ng tin ƒë·ªãa ch·ªâ
 *               MaTinh:
 *                 type: string
 *                 description: M√£ t·ªânh
 *               TenTinh:
 *                 type: string
 *                 description: T√™n t·ªânh
 *               IdTinhThanh:
 *                 type: string
 *                 description: ID t·ªânh th√†nh
 *               MaXa:
 *                 type: string
 *                 description: M√£ x√£
 *               TenXa:
 *                 type: string
 *                 description: T√™n x√£
 *               IdXaPhuong:
 *                 type: string
 *                 description: ID x√£ ph∆∞·ªùng
 *               
 *               # Th√¥ng tin kh√°c
 *               IdDanToc:
 *                 type: string
 *                 description: ID d√¢n t·ªôc
 *               TenDanToc:
 *                 type: string
 *                 description: T√™n d√¢n t·ªôc
 *               IdQuocTich:
 *                 type: string
 *                 description: ID qu·ªëc t·ªãch
 *               IdKhoaKham:
 *                 type: string
 *                 description: ID khoa kh√°m
 *               IdNgheNghiep:
 *                 type: string
 *                 description: ID ngh·ªÅ nghi·ªáp
 *               TenNgheNghiep:
 *                 type: string
 *                 description: T√™n ngh·ªÅ nghi·ªáp
 *               IdCanBoDonTiep:
 *                 type: string
 *                 description: ID c√°n b·ªô ƒë√≥n ti·∫øp
 *               IdBenhVien:
 *                 type: string
 *                 description: ID b·ªánh vi·ªán
 *               
 *               # Th√¥ng tin l·ªãch kh√°m
 *               exam_type:
 *                 type: string
 *                 enum: [BHYT, DV]
 *                 description: Lo·∫°i h√¨nh kh√°m
 *               exam_date:
 *                 type: string
 *                 format: date
 *                 description: Ng√†y kh√°m
 *               exam_time:
 *                 type: string
 *                 description: Gi·ªù kh√°m
 *               symptoms:
 *                 type: string
 *                 description: Tri·ªáu ch·ª©ng (kh√¥ng b·∫Øt bu·ªôc)
 *               IsDonTiepCCCD:
 *                 type: boolean
 *                 description: ƒê√°nh d·∫•u ƒë∆°n ti·∫øp CCCD
 *     responses:
 *       201:
 *         description: ƒê·∫∑t l·ªãch kh√°m th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   $ref: '#/components/schemas/HealthInsuranceExam'
 *       400:
 *         description: ƒê·∫∑t l·ªãch kh√°m th·∫•t b·∫°i
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
const createExam = async (req, res) => {
  try {
    // Logic check BHYT d·ª±a tr√™n role
    const { 
      exam_type, 
      CCCD,
      HoTen,
      NgaySinh
    } = req.body;
    
    // Ch·ªâ call API BHYT n·∫øu:
    // 1. Role l√† 'user' (kh√¥ng ph·∫£i receptionist)
    // 2. exam_type l√† 'BHYT' (kh√¥ng ph·∫£i 'DV')  
    // 3. C√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin CCCD
    if (req.role !== 'receptionist' && 
        exam_type === 'BHYT' && 
        CCCD && 
        HoTen && 
        NgaySinh) {
      
      console.log('üîç [BOOKING] Calling BHYT API for user booking');
      
      try {
        // Convert NgaySinh sang format dd/mm/yyyy cho API BHYT
        let formattedDate;
        if (typeof NgaySinh === 'string' && NgaySinh.includes('/')) {
          formattedDate = NgaySinh;
        } else {
          
          const dateObj = new Date(NgaySinh);
          const day = String(dateObj.getDate()).padStart(2, '0');
          const month = String(dateObj.getMonth() + 1).padStart(2, '0');
          const year = dateObj.getFullYear();
          formattedDate = `${day}/${month}/${year}`;
        }
        
        
        const bhytCheckResult = await healthInsuranceExamService.checkBHYTCard({
          maThe: CCCD,    
          hoTen: HoTen,                   
          ngaySinh: formattedDate           
        });
        
        // N·∫øu check BHYT th·∫•t b·∫°i, tr·∫£ v·ªÅ l·ªói
        if (!bhytCheckResult.success) {
          return res.status(400).json({
            success: false,
            message: 'CCCD ch∆∞a t√≠ch h·ª£p BHYT: ' + bhytCheckResult.message
          });
        }
        
        // N·∫øu check BHYT th√†nh c√¥ng, l∆∞u m√£ CCCD v√†o tr∆∞·ªùng BHYT ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i
        req.body.BHYT = CCCD;
      } catch (bhytError) {
        return res.status(400).json({
          success: false,
          message: 'L·ªói khi g·ªçi c·ªïng BHYT: ' + bhytError.message
        });
      }
    }
    
    // Truy·ªÅn role t·ª´ req.role v√†o service
    const result = await healthInsuranceExamService.createExam({ ...req.body, role: req.role });
    
    // N·∫øu role l√† receptionist th√¨ kh√¥ng tr·∫£ v·ªÅ qr_code v√† encoded_id
    if (req.role === 'receptionist') {
      return res.status(201).json({
        success: true,
        message: 'ƒê·∫∑t l·ªãch kh√°m th√†nh c√¥ng',
        data: result.exam
      });
    }
    
    // Tr∆∞·ªùng h·ª£p c√≤n l·∫°i v·∫´n tr·∫£ v·ªÅ qr_code v√† encoded_id
    return res.status(201).json({
      success: true,
      message: 'ƒê·∫∑t l·ªãch kh√°m th√†nh c√¥ng',
      data: result.exam,
      qr_code: result.qr_code,
      encoded_id: result.encoded_id
    });
  } catch (error) {
    // Tr·∫£ v·ªÅ l·ªói do service x√°c ƒë·ªãnh
    return res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * @swagger
 * /api/health-insurance-exams/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin l·ªãch kh√°m b·∫£o hi·ªÉm y t·∫ø theo id
 *     tags:
 *       - HealthInsuranceExam
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ObjectId c·ªßa l·ªãch kh√°m
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ th√¥ng tin l·ªãch kh√°m
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/HealthInsuranceExam'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       400:
 *         description: L·ªói truy v·∫•n
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
const getExamById = async (req, res) => {
  try {
    const exam = await healthInsuranceExamService.getExamById(req.params.id);
    if (!exam) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m' });
    }
    return res.status(200).json({ success: true, data: exam });
  } catch (error) {
    return res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * @swagger
 * /api/health-insurance-exams/check/{encoded_id}:
 *   get:
 *     summary: Check hi·ªáu l·ª±c l·ªãch kh√°m b·∫±ng m√£ QR (encoded_id qua path)
 *     tags:
 *       - HealthInsuranceExam
 *     parameters:
 *       - in: path
 *         name: encoded_id
 *         required: true
 *         schema:
 *           type: string
 *         description: M√£ ƒë√£ encode t·ª´ QR code
 *     responses:
 *       200:
 *         description: K·∫øt qu·∫£ check-in
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 valid:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 exam:
 *                   $ref: '#/components/schemas/HealthInsuranceExam'
 *       400:
 *         description: Check-in th·∫•t b·∫°i
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
const checkExamByEncodedId = async (req, res) => {
  try {
    const { encoded_id } = req.params;
    const result = await healthInsuranceExamService.checkExamByEncodedId(encoded_id);
    return res.status(200).json(result);
  } catch (error) {
    return res.status(400).json({ valid: false, message: error.message });
  }
};

/**
 * @swagger
 * /api/health-insurance-exams/all:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ l·ªãch kh√°m b·∫£o hi·ªÉm y t·∫ø (c√≥ ph√¢n trang)
 *     tags:
 *       - HealthInsuranceExam
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: S·ªë trang (m·∫∑c ƒë·ªãnh l·∫•y t·∫•t c·∫£ n·∫øu kh√¥ng c√≥)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: S·ªë b·∫£n ghi m·ªói trang (m·∫∑c ƒë·ªãnh 10)
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *         description: Tr∆∞·ªùng ƒë·ªÉ s·∫Øp x·∫øp (m·∫∑c ƒë·ªãnh createdAt, lu√¥n s·∫Øp x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈©)
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [pending, accept, reject]
 *         description: L·ªçc theo tr·∫°ng th√°i
 *       - in: query
 *         name: exam_type
 *         schema:
 *           type: string
 *           enum: [BHYT, DV]
 *         description: L·ªçc theo lo·∫°i kh√°m
 *       - in: query
 *         name: exam_date
 *         schema:
 *           type: string
 *           format: date
 *         description: L·ªçc theo ng√†y kh√°m (yyyy-MM-dd)
 *       - in: query
 *         name: IdPhongKham
 *         schema:
 *           type: string
 *         description: L·ªçc theo ID ph√≤ng kh√°m
 *     responses:
 *       200:
 *         description: Danh s√°ch l·ªãch kh√°m
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/HealthInsuranceExam'
 *                 total:
 *                   type: integer
 *                   description: T·ªïng s·ªë b·∫£n ghi
 *                 page:
 *                   type: integer
 *                   description: Trang hi·ªán t·∫°i
 *                 totalPages:
 *                   type: integer
 *                   description: T·ªïng s·ªë trang
 *                 limit:
 *                   type: integer
 *                   description: S·ªë b·∫£n ghi m·ªói trang
 *       400:
 *         description: L·ªói truy v·∫•n
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
const getAllExams = async (req, res) => {
  try {
    // L·∫•y c√°c tham s·ªë t·ª´ query
    const options = {
      page: req.query.page,
      limit: req.query.limit || 10,
      sortBy: req.query.sortBy,
      status: req.query.status,
      exam_type: req.query.exam_type,
      exam_date: req.query.exam_date,
      IdPhongKham: req.query.IdPhongKham
    };
    
    // G·ªçi service ƒë·ªÉ l·∫•y d·ªØ li·ªáu
    const result = await healthInsuranceExamService.getAllExams(options);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch l·ªãch kh√°m th√†nh c√¥ng',
      ...result
    });
  } catch (error) {
    return res.status(400).json({
      success: false,
      message: error.message || 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch l·ªãch kh√°m'
    });
  }
};

/**
 * @swagger
 * /api/health-insurance-exams/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin l·ªãch kh√°m
 *     tags:
 *       - HealthInsuranceExam
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID c·ªßa l·ªãch kh√°m c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               HoTen:
 *                 type: string
 *                 description: H·ªç t√™n b·ªánh nh√¢n
 *               DienThoai:
 *                 type: string
 *                 description: S·ªë ƒëi·ªán tho·∫°i
 *               email:
 *                 type: string
 *                 description: Email
 *               CCCD:
 *                 type: string
 *                 description: S·ªë CCCD
 *               NgaySinh:
 *                 type: string
 *                 format: date
 *                 description: Ng√†y sinh
 *               GioiTinh:
 *                 type: string
 *                 enum: [Nam, N·ªØ, Kh√°c]
 *                 description: Gi·ªõi t√≠nh
 *               DiaChi:
 *                 type: string
 *                 description: ƒê·ªãa ch·ªâ
 *               status:
 *                 type: string
 *                 enum: [pending, accept, reject]
 *                 description: Tr·∫°ng th√°i l·ªãch kh√°m
 *               symptoms:
 *                 type: string
 *                 description: Tri·ªáu ch·ª©ng
 *               exam_date:
 *                 type: string
 *                 format: date
 *                 description: Ng√†y kh√°m
 *               exam_time:
 *                 type: string
 *                 description: Gi·ªù kh√°m
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t l·ªãch kh√°m th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: C·∫≠p nh·∫≠t l·ªãch kh√°m th√†nh c√¥ng
 *                 data:
 *                   $ref: '#/components/schemas/HealthInsuranceExam'
 *       400:
 *         description: L·ªói c·∫≠p nh·∫≠t
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
const updateExam = async (req, res) => {
  try {
    const { id } = req.params;
    const data = req.body;
    
    // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t l·ªãch kh√°m
    const updatedExam = await healthInsuranceExamService.updateExam(id, data);
    
    return res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t l·ªãch kh√°m th√†nh c√¥ng',
      ...updateExam
    });
  } catch (error) {
    
    return res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

/**
 * @swagger
 * /api/health-insurance-exams/{id}:
 *   delete:
 *     summary: X√≥a l·ªãch kh√°m
 *     tags:
 *       - HealthInsuranceExam
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID c·ªßa l·ªãch kh√°m c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: X√≥a l·ªãch kh√°m th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: X√≥a l·ªãch kh√°m th√†nh c√¥ng
 *       400:
 *         description: L·ªói x√≥a
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
const deleteExam = async (req, res) => {
  try {
    const { id } = req.params;
    
    // G·ªçi service ƒë·ªÉ x√≥a l·ªãch kh√°m
    await healthInsuranceExamService.deleteExam(id);
    
    return res.status(200).json({
      success: true,
      message: 'X√≥a l·ªãch kh√°m th√†nh c√¥ng'
    });
  } catch (error) {
    return res.status(400).json({
      success: false,
      message: error.message
    });
  }
};
/**
 * @swagger
 * /api/health-insurance-exams/by-cccd/{cccd}:
 *   get:
 *     summary: T√¨m l·ªãch kh√°m theo CCCD
 *     tags:
 *       - HealthInsuranceExam
 *     parameters:
 *       - in: path
 *         name: cccd
 *         required: true
 *         schema:
 *           type: string
 *         description: S·ªë CCCD c·ªßa b·ªánh nh√¢n
 *     responses:
 *       200:
 *         description: L·ªãch kh√°m ƒë∆∞·ª£c t√¨m th·∫•y ho·∫∑c kh√¥ng c√≥ b·∫£n ghi n√†o
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Lu√¥n tr·∫£ v·ªÅ true
 *                 data:
 *                   type: object
 *                   nullable: true
 *                   description: B·∫£n ghi l·ªãch kh√°m n·∫øu t√¨m th·∫•y, ho·∫∑c null n·∫øu kh√¥ng c√≥
 *       400:
 *         description: L·ªói truy v·∫•n
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 */
const getExamByCCCD = async (req, res) => {
  try {
    const { cccd } = req.params;

    if (!cccd) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin CCCD'
      });
    }

    const exam = await healthInsuranceExamService.findOne({ CCCD: cccd });

    return res.status(200).json({
      success: true,
      data: exam || null // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y b·∫£n ghi
    });
  } catch (error) {
    return res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

export default {
  createExam,
  getExamById,
  checkExamByEncodedId,
  getExamByCCCD,
  checkBHYTCard,
  getAllExams,
  updateExam,
  deleteExam
};